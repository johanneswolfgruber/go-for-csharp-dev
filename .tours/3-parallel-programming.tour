{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "3 - Parallel Programming",
  "steps": [
    {
      "title": "Introduction",
      "description": "## Introduction  \r\n\r\nThis tour walks through the \"main\" function that makes service calls in parallel. This includes goroutines, using channels for communication, and using WaitGroup.  \r\n\r\nClick \"Next\" to see the how to parallel program in Go!"
    },
    {
      "file": "async/main.go",
      "line": 58,
      "description": "## Exploring parallel programming\r\n\r\nTo explore parallel programming in Go, we will walk through the \"main\" function. This uses goroutines to run asynchronous functions, a channel to communicate among the various functions, and a WaitGroup to signal when asynchronous processes are complete."
    },
    {
      "file": "async/main.go",
      "line": 60,
      "description": "## Getting IDs\r\n\r\nTo start the program, first we create a variable to hold the start time of the function (\"start\"). Then we call the \"getIDs\" function to get a slice of integer values for the data (we'll use these values to make the service calls).\r\n\r\n**Additional Information**  \r\n* Declaring and assigning variables: Tour #1 [Variable declaration and assignment][1 - Go Syntax and Conventions#8]"
    },
    {
      "file": "async/main.go",
      "line": 63,
      "description": "## Checking for errors  \r\n\r\nThe \"if\" statement checks to see if an error occurred. If so, we use the \"log.Fatalf\" to write a message to the log and exit the application with an error code.  \r\n\r\nHere is a sample output if the application is run when the service is not available:  \r\n\r\n```\r\n2021/01/03 11:46:33 getIDs failed: Get \"http://localhost:9874/ids\": dial tcp [::1]:9874: \r\nconnectex: No connection could be made because the target machine actively refused it.\r\n```\r\n\r\nThe \"log.Fatalf\" function combines logging with exiting with an error. It is equivalent to the following code:  \r\n\r\n```go\r\n  log.Printf(\"getIDs failed: %v\", err)\r\n  os.Exit(1)\r\n```\r\n\r\n**Additional Information**  \r\n* Error handling: Tour #1 [Error handling][1 - Go Syntax and Conventions#22]\r\n* log.Fatalf: Tour #1 [Other print functions][1 - Go Syntax and Conventions#14]"
    },
    {
      "file": "async/main.go",
      "line": 64,
      "description": "## Printing the IDs\r\n\r\nThis outputs the contents of the \"ids\" slice to the console. The output looks like this:\r\n\r\n```\r\n[1 2 3 4 5 6 7 8 9]\r\n```\r\n\r\n**Additional Information**  \r\n* Println: Tour #1 [fmt.Println][1 - Go Syntax and Conventions#11]\r\n"
    },
    {
      "file": "async/main.go",
      "line": 66,
      "description": "## WaitGroup overview  \r\n\r\nA WaitGroup (from the \"sync\" package), lets us signal when a process is complete. This allows us to coordinate across asynchronous function calls. \"WaitGroup\" has relatively few functions and behaves like a reference counter. (We'll use these as we step through the code).  \r\n\r\n**Add**  \r\nThe \"Add\" function takes an integer parameter. This is generally \"1\", meaning, we're adding 1 to the count.  \r\n\r\n**Done**  \r\nThe \"Done\" function subtracts 1 from the count. This is equivalent to \"Add(-1)\". This signals that this particular item is done.  \r\n\r\n**Wait**  \r\nThe \"Wait\" fuction stops processing until the count reaches 0. This let's us wait until all asynchronous operations are complete before we continue with processing.  \r\n\r\nWe will see all of these functions in operation as we go."
    },
    {
      "file": "async/main.go",
      "line": 67,
      "description": "## Channel overview  \r\n\r\nA channel in go allows us to communicate between asynchronous functions. We can think of this as a thread-safe queue. One asynchronous function can add items to a channel and a different function can remove items from the channel. A channel can only hold one type.\r\n\r\n**make**  \r\nThe built-in \"make\" function can be used to create a channel (as well as things like maps and slices). This function creates a channel to hold \"person\" items. The second parameter (\"10\") specifies the capacity of the channel.  \r\n\r\n**Channel capacity**  \r\nThe capacity of the channel is important. The capacity is the maximum number of items that can be held by the channel. If the channel reaches capacity, then any operations to add new items to the channel will block until there is space for the item.\r\n\r\nIf no capacity is specified, then the capacity is 1. This means that only 1 item can be added to the channel. A new item cannot be added to the channel until after the first item is read from the channel.  \r\n\r\n**Writing to a channel**  \r\nTo write to a channel, use the \"<-\" operator pointing **toward** the channel. We'll see this a little later. It may look like this:  \r\n```go\r\n  ch <- p\r\n```\r\nThis reads a value from the variable \"p\" and puts it onto the channel (\"ch\"). If the channel is already at capacity, this operation will **block** until there is space available.\r\n\r\n**Closing a channel**  \r\nWhen we are done writing to a channel, we should close it. We'll see why this is important when looking at reading from a channel below.  \r\n```go\r\n  close(ch)\r\n```\r\nThis code closes the channel \"ch\".\r\n\r\n**Reading from a channel**  \r\nTo read from a channel, use the \"<-\" operator pointing **away** from the channel. Here's a sample:\r\n```go\r\n  p = <-ch\r\n```\r\nThis code will read a value from the channel (\"ch\") and assign it to the variable \"p\". In addition, we could use the \":=\" operator to declare and assign to a variable.  \r\n\r\nIf we try to read from an empty channel, the operation will **block** until an item is available. If we try to read from a **closed** channel, the operation will not block. This is why it is important to close a channel once we are done writing to it.  \r\n\r\nWe will look at some alternate ways to read from a channel a bit later."
    },
    {
      "file": "async/main.go",
      "line": 68,
      "description": "## Looping over the IDs  \r\n\r\nThis \"for\" loop iterates over each of the integers in the \"ids\" slice. This is similar to a \"foreach\" loop in C#. The \"n\" variable is the value of the item in the iteration.  \r\n\r\n**Additional Information**  \r\n* \"for\" loops: Tour #1 [for loops][1 - Go Syntax and Conventions#16]"
    },
    {
      "file": "async/main.go",
      "line": 69,
      "description": "## Adding to the WaitGroup  \r\n\r\nFor each iteration of the \"for\" loop, we \"Add\" 1 to the WaitGroup variable. Since the \"ids\" slice has 9 items, we eventually end up with a count of 9 in the WaitGroup."
    },
    {
      "file": "async/main.go",
      "line": 70,
      "description": "## Goroutine\r\n\r\nUse \"go\" to start a new goroutine. A goroutine does not wait for processing to complete before the current function continues. This is simialar to kicking off an \"async\" method in C#.\r\n\r\nA goroutine can be a normal named function or it can be an anonymous function (like we use here). More on anonymous functions next.",
      "selection": {
        "start": {
          "line": 70,
          "character": 3
        },
        "end": {
          "line": 70,
          "character": 5
        }
      }
    },
    {
      "file": "async/main.go",
      "line": 78,
      "description": "## Anonymous functions  \r\n\r\nAnonymous functions in Go are similar to anonymous delegates in C#. This is an inline function that does not have a name.  \r\n\r\n**Declaring an anonymous function**  \r\nAnonymous functions are declared usig what is known as a \"**function literal**\" in Go. This starts with the \"func\" keyword followed by the parameters, return values, and method body (similar to a normal function declaration, just without the name).  \r\n\r\n**Anonymous function parameters**  \r\nNotice the \"(n)\" after the function body. This is how parameters are passed to an anonymous function. If there are no parameters, then you need a set of empty parentheses here. This code denotes that the \"n\" value (from the \"for\" loop) is used for the \"id\" parameter of the anonymous function.  \r\n\r\n**Closures**  \r\nAnonymous functions in Go also support closures (closures are called \"captured variables\" in C#). This means that the body of the anonymous functions can use whatever variables are in scope of the outer function. In this example, the anonymous function uses \"wg\" (the WaitGroup) as well as \"ch\" (the channel) from the outer function.  \r\n\r\n**DANGER**  \r\nJust like in C#, it is dangerous to use an iterator (such as a \"for\" indexer) as a closure. The same is true of iterator values. You can experiment with this by using \"n\" directly instead of passing it as a parameter -- the results are not as we would expect. The good news is that the Go linter will warn you if you inadvertantly capture an indexer / iterator. This is why we explicitly pass the \"n\" value into the anonymous function as a parameter.  \r\n\r\n**Additional Information**  \r\n* Anonymous functions and function literals: Tour #1 [Anonymous functions][1 - Go Syntax and Conventions#27]",
      "selection": {
        "start": {
          "line": 70,
          "character": 6
        },
        "end": {
          "line": 78,
          "character": 7
        }
      }
    },
    {
      "file": "async/main.go",
      "line": 71,
      "description": "## Subtracting from the WaitGroup\r\n\r\nCalling \"Done\" on the WaitGroup will subtract 1 from the count (the same as \"Add(-1)\"). Since this call to \"Done\" is inside fo the goroutine, it will run once for each call to this anonymous function.  \r\n\r\nThe \"defer\" call means that \"Done\" will not be called until just before the anonymous function exits (simiarl to a \"finally\" in C#).  \r\n\r\n**Additional Information**  \r\n* defer: Tour #1 [Deferring an operation][1 - Go Syntax and Conventions#26]"
    },
    {
      "file": "async/main.go",
      "line": 72,
      "description": "## Calling a function  \r\n\r\nInside the goroutine, we make a call to the \"getPerson\" function. This function calls a service and returns a populated person struct or an error.\r\n\r\n**Additional Information**  \r\n* \"getPerson\" function: Tour #2 (entire tour) [Start Tour][2 - Get Data from a Service#1]"
    },
    {
      "file": "async/main.go",
      "line": 76,
      "description": "## Checking for errors  \r\n\r\nThis \"if\" checks to see if the error is populated. If it is not nil (\"null\" in C#), then we use the \"log.Printf\" function to output the error.  \r\n\r\nAs is common in Go, the \"if err != nil\" block ends with a return. This short-circuits the function (rather than having an \"else\" block). Because of the \"defer\" above, the WaitGroup will be decremented before the function returns.\r\n\r\n**log.Printf**  \r\n\"log.Printf\" is similar to \"fmt.Printf\". By default, both will output to the console. This is because the console is the default location for the log (used by \"log.Printf\") and the default location for standard out (used by \"fmt.Printf\").  \r\n\r\nOne difference is that \"log\" automatically includes a **time stamp** at the beginning of the output message.  \r\n\r\n**Additional Information**  \r\n* Error handling: Tour #1 [Error handling][1 - Go Syntax and Conventions#22]\r\n* log.Printf: Tour #1 [Other print functions][1 - Go Syntax and Conventions#14]",
      "selection": {
        "start": {
          "line": 73,
          "character": 4
        },
        "end": {
          "line": 76,
          "character": 5
        }
      }
    },
    {
      "file": "async/main.go",
      "line": 77,
      "description": "## Writing to a channel\r\n\r\nTo put an item on the channel, use the \"<-\" operator pointing toward the channel. This code puts the \"p\" variable (returned from \"getPerson\") onto the channel.\r\n\r\nIf the channel is at capacity, this operation will **block** until there is space available."
    },
    {
      "file": "async/main.go",
      "line": 84,
      "description": "## Another anonymous goroutine\r\n\r\nThis code specifies another goroutine (meaning it will run asynchronously). It is an anonymous function (an inline function) that takes no parameters and returns no values. Notice that the empty parentheses are used for the parameter declaration (after the \"func\") and for passing parameters (after the closing brace).",
      "selection": {
        "start": {
          "line": 81,
          "character": 2
        },
        "end": {
          "line": 84,
          "character": 5
        }
      }
    },
    {
      "file": "async/main.go",
      "line": 82,
      "description": "## Waiting for a WaitGroup\r\n\r\nThe call to \"Wait\" will block until the WaitGroup count is at 0. Above, we have a \"for\" loop that adds to the WaitGroup for each iteration (9 items for this example code). Inside the loop, we have goroutines that call a web service and then decrement the WaitGroup.  \r\n\r\nThis means that this line of code will block until all of the inner goroutines of the \"for\" loop have completed."
    },
    {
      "file": "async/main.go",
      "line": 83,
      "description": "## Closing the channel  \r\n\r\nThe built-in \"close\" function is used to close the channel. This is to denote that we will not be writing any new values to the channel. The channel is still available for reading until all of the items have been drained from the channel.  \r\n\r\nThe WaitGroup allows us to wait for all of the asynchronous goroutines (that write to the channel) to finish before we close the channel."
    },
    {
      "file": "async/main.go",
      "line": 86,
      "description": "## Reading from a channel  \r\n\r\nThere are several ways to read from a channel.  \r\n\r\n**Example 1:**  \r\n```go\r\n  p := <-ch\r\n```\r\nThis will read a value from the channel (\"ch\") and assign it to the (newly-declared) variable \"p\". If there are **no items** in the channel, this will block until something is available. If the channel is **closed**, then \"p\" will be a nil or default value. (For a \"person\" struct, this would be a struct where all the fields have default values, such as 0 for integers and \"\" for strings).  \r\n\r\n**Example 2:**  \r\n```go\r\n  p, ok := <-ch\r\n  if !ok {\r\n      // channel was closed, p is not valid\r\n  }\r\n```\r\nReading from a channel returns 2 values. (Sometimes the second is ignored as shown above.) The second value is whether the read was successful (true or false). If the channel is closed, then the second value will be false. We can use this to know the channel was closed and not to use the invalid data value.  \r\n\r\n**Example 3:**  \r\n```go\r\n   for p := range ch {\r\n       // p is populated; loop exits when the channel is closed\r\n   }\r\n```  \r\nAnother way of reading from a channel is to use a \"range\" with a \"for\" loop. In this case, \"p\" will hold the value for the channel. If the channel is empty, the next iteration of the loop will block until a value is available. If the channel is closed, the loop will exit."
    },
    {
      "file": "async/main.go",
      "line": 86,
      "description": "## Blocking and non-blocking functions \r\n\r\nAs mentioned above, reading from a channel is a blocking operation. This means that the first value of \"p\" will not be assigned until after the first value is written to the channel.  \r\n\r\nCalling the service (multiple times) runs asynchronously. Also, the anonymous function that waits to close the channel runs asynchronously. These are non-blocking in that they do not prevent the \"main\" function from moving forward.  \r\n\r\nWe get to this step (reading from the channel) while other processes run in the background. As the channel is filled in the background, it will be drained by this loop."
    },
    {
      "file": "async/main.go",
      "line": 87,
      "description": "## Using the channel value\r\n\r\nInside the \"for\" loop, we can use the value that was pulled off the channel. In this case, we use it to output to the console.  \r\n\r\n**Output**  \r\nThe output looks like the following:\r\n```\r\n5: Dave Lister\r\n9: Isaac Gampu\r\n1: John Koenig\r\n2: Dylan Hunt\r\n7: John Sheridan\r\n4: John Crichton\r\n8: Dante Montana\r\n3: Leela Turanga\r\n6: Laura Roslin\r\n```\r\n\r\n**Additional Information**  \r\n* Printf: Tour #1 [fmt.Printf][1 - Go Syntax and Conventions#13]"
    },
    {
      "file": "async/main.go",
      "line": 91,
      "description": "## Finishing the application  \r\n\r\nThe last steps of this application are to get the elapsed time and output it to the console.  \r\n\r\nThe \"time.Since\" function returns a \"Duration\" that tells how much time has elapsed between the now and the time used as a parameter. In this case, this is the elapsed time since we saved off the \"start\" time above.  \r\n\r\nWe assign this value to the \"elapsed\" variable and output it using a \"Printf\" function call.  \r\n\r\n**Output**  \r\nThe final output looks like the following:\r\n```\r\n[1 2 3 4 5 6 7 8 9]\r\n5: Dave Lister\r\n9: Isaac Gampu\r\n1: John Koenig\r\n2: Dylan Hunt\r\n7: John Sheridan\r\n4: John Crichton\r\n8: Dante Montana\r\n3: Leela Turanga\r\n6: Laura Roslin\r\nTotal time: 1.6783436s\r\n```",
      "selection": {
        "start": {
          "line": 90,
          "character": 2
        },
        "end": {
          "line": 91,
          "character": 41
        }
      }
    }
  ]
}